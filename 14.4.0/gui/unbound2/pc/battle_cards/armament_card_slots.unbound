(def element ArmamentCardSlots () dispatch_size_change=true
	(scope
		(var battleCardsCollection:gfx = "$datahub.getCollection(CC.battleCard)")
		(var selectedCardsCollection:gfx = "battleCardsCollection.child('installed')")

		(var selectedCardsCollectionLength:number = "selectedCardsCollection.items.length" (event "selectedCardsCollection.evAdded") (event "selectedCardsCollection.evRemoved"))

		(var dockCardSelectorWatcher:gfx = "$datahub.getFirstWatcher(CC.dockCardSelector)")
		(var dockCardSelectorEntity:gfx = "dockCardSelectorWatcher ? dockCardSelectorWatcher.entity : null" (event "dockCardSelectorWatcher.event"))
		(var selectorMaxCount:number = "dockCardSelectorEntity ? dockCardSelectorEntity.dockCardSelector.maxCards : 0" (event "dockCardSelectorEntity.dockCardSelector.evMaxCardsChanged"))
		(var isLevelUpAvailable:bool = "dockCardSelectorEntity ? dockCardSelectorEntity.dockCardSelector.isLevelUpAvailable : 0" (event "dockCardSelectorEntity.dockCardSelector.evIsLevelUpAvailableChanged"))

		(var newContentEntity:gfx = "$datahub.getPrimaryEntity(CC.newContent, SC.Common.CONTENT_CATEGORY.BATTLE_CARD)")
		(var newContentCounter:number = "newContentEntity ? newContentEntity.newContent.count : 0" (event "newContentEntity.newContent.evCountChanged"))
		(var isNew:bool = "newContentCounter > 0")

		(macro PULL_SHIP_ID)
		(macro PULL_SHIP "shipIdForModuleInset")  
		(var ownShipComponent:gfx = "shipEntity ? shipEntity.ownShip : null" (event "shipEntity.evAdded") (event "shipEntity.evRemoved"))
		(var isOwned:bool = "ownShipComponent != null")
		(var isExcluded:bool =		"!shipSelectionComponent.isFitForBattleType"				(event "shipSelectionComponent.evShipUpdate"))
		(var isInFormation:bool =	"ownShipComponent ? ownShipComponent.isInFormation : false"	(event "ownShipComponent.evUpdateLock"))
		(var isNeedRepair:bool =	"ownShipComponent ? ownShipComponent.isNeedRepair : false"	(event "ownShipComponent.evUpdateDockState"))
		(var isNeedShell:bool =		"ownShipComponent ? ownShipComponent.isNeedShell : false"	(event "ownShipComponent.evUpdateDockState"))

		(var isAvailable:bool = "!(!isOwned || isExcluded || isInFormation || isNeedRepair || isNeedShell)")

		(var mouseInstruction:dict =	"!isOwned								?	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																						text: 'IDS_BATTLE_CARDS_OWN_SHIP_FOR_USE_MANAGEMENT' } :
										isExcluded								?	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																						text: 'IDS_BATTLE_CARDS_ARE_UNAVAILABLE_FOR_CURRENT_SHIP' } :
										isInFormation							?	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																						text: 'IDS_SET_UNREADY_DIVISION_FIRST_TO_OPERATE_BATTLE_CARDS' } :
										isNeedRepair || isNeedShell				?	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																						text: 'IDS_SERVICE_SHIP_TO_OPERATE_BATTLE_CARDS' }
																				:	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT,
																						text: 'IDS_MOUSE_INSTRUCTION_CHANGE_BATTLE_CARD' }")
	)
	(style
		(width = 100%)
		(flow = "horizontal")
		(align = "center")
	)

	(bind alpha "isOwned ? 1 : 0.5") 

	(controller $Repeat renderer='BattleCardItemSlotDock'
		(bind count "selectorMaxCount")
		(args
			_cardCollection="selectedCardsCollection"
			_isAvailable="isAvailable"
			_mouseInstruction="mouseInstruction"
			_isLevelUpAvailable="isLevelUpAvailable"
			_isNew="isNew"
		)
	)
)